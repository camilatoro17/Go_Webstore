// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"go-store/types"
	"math/rand"
	"strconv"
)

func OrderEntry(products []types.Product) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html><head><title>Go Webstore</title><link rel=\"stylesheet\" href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("assets/styles/styles.css?%d", rand.Intn(10000)))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/OrderEntry.templ`, Line: 14, Col: 97}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = header().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"container\"><div class=\"content\"><main><form id=\"order-form\"><fieldset><legend>Personal Information</legend> <label for=\"fname\">First Name:</label><br><input type=\"text\" id=\"fname\" name=\"fname\" pattern=\"[A-Za-z\\s&#39;]+\" required onkeyup=\"showHint(this.value, &#39;first&#39;)\"><br><label for=\"lname\">Last Name:</label><br><input type=\"text\" id=\"lname\" name=\"lname\" pattern=\"[A-Za-z\\s&#39;]+\" required onkeyup=\"showHint(this.value, &#39;last&#39;)\"><br><label for=\"email\">Email:</label><br><input type=\"email\" id=\"email\" name=\"email\" required><br></fieldset><fieldset><legend>Product Information</legend> <label for=\"car\">Available Cars:</label><br><select id=\"car\" name=\"car\" required onchange=\"updateAvailableQuantity()\"><option value=\"\" disabled selected>Select a car</option> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, product := range products {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(product.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/OrderEntry.templ`, Line: 43, Col: 63}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-image=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(product.Image)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/OrderEntry.templ`, Line: 43, Col: 90}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-quantity=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(product.QuantityInStock))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/OrderEntry.templ`, Line: 43, Col: 144}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%s : $%.2f", product.Name, product.Price))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/OrderEntry.templ`, Line: 44, Col: 96}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select><br><label for=\"available\">Available:</label><br><input type=\"text\" id=\"available\" readonly value=\"Select a product\" class=\"available-field\"><br><label for=\"quantity\">Quantity:</label><br><input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"100\" value=\"1\" required><br></fieldset><button type=\"submit\">Purchase</button> <button type=\"reset\">Clear Fields</button></form></main><aside id=\"asideContent\"><h3>Customer Information</h3><table id=\"customer-list\" border=\"1\" style=\"display:none;\"><thead><tr><th>First Name</th><th>Last Name</th><th>Email</th></tr></thead> <tbody id=\"suggestions-body\"></tbody></table></aside></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n        function updateAvailableQuantity() {\n            // Get what they selected\n            const carSelect = document.getElementById(\"car\");\n            const availableField = document.getElementById(\"available\");\n\n            // Get selected attributes\n            const selectedOption = carSelect.options[carSelect.selectedIndex];\n            const quantity = selectedOption.getAttribute(\"data-quantity\");\n\n            // Update available with quantity\n            availableField.value = quantity ? quantity : \"Select a product\";\n        }\n\n        function showHint(value, field) {\n            const suggestionsBody = document.getElementById(\"suggestions-body\");\n            if (!suggestionsBody) {\n                console.error(\"Element with id 'suggestions-body' not found\");\n                return;\n            }\n\n            if (value.length === 0) {\n                suggestionsBody.innerHTML = \"<tr><td colspan='3'>No results</td></tr>\";\n                document.getElementById(\"customer-list\").style.display = \"none\";\n                return;\n            }\n\n            fetch(`/get_customers?query=${value}&field=${field}`)\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(\"Network response was not ok\");\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    let suggestions = \"\";\n                    if (data.customers && data.customers.length > 0) {\n                        document.getElementById(\"customer-list\").style.display = \"block\";\n                        data.customers.forEach(customer => {\n                            suggestions += `<tr onclick=\"selectCustomer('${customer.FirstName}', '${customer.LastName}', '${customer.Email}', event)\">\n                                                <td>${customer.FirstName}</td>\n                                                <td>${customer.LastName}</td>\n                                                <td>${customer.Email}</td>\n                                            </tr>`;\n                        });\n                    } else {\n                        suggestions = \"<tr><td colspan='3'>No results</td></tr>\";\n                        document.getElementById(\"customer-list\").style.display = \"none\";\n                    }\n                    suggestionsBody.innerHTML = suggestions;\n                })\n                .catch(error => console.error(\"Error fetching customers:\", error));\n        }\n\n\n\n\n        function selectCustomer(firstName, lastName, email) {\n            document.getElementById(\"fname\").value = firstName;\n            document.getElementById(\"lname\").value = lastName;\n            document.getElementById(\"email\").value = email;\n\n            const previouslySelected = document.querySelector(\"#suggestions-body .selected\");\n            if (previouslySelected) {\n                previouslySelected.classList.remove(\"selected\");\n            }\n\n            event.currentTarget.classList.add(\"selected\");\n        }\n\n        $(document).ready(function() {\n            $(\"#order-form\").submit(function(e) {\n                e.preventDefault();\n\n                $.ajax({\n                    type: \"POST\",\n                    url: \"/add_order\",\n                    data: $(this).serialize(),\n                    success: function(response) {\n                        // Show confirmation msg\n                        $(\"#asideContent\").html(`<p>${response.message}</p>`);\n\n                        // Clear table and form\n                        $(\"#suggestions-body\").empty();\n                        $(\"#order-form\")[0].reset();\n                        $(\"#available\").val(\"Select a product\");\n                    },\n                    error: function(xhr) {\n                        const errorResponse = JSON.parse(xhr.responseText);\n                        $(\"#asideContent\").html(`<p>${errorResponse.error}</p>`);\n                    }\n                });\n            });\n        });\n\n\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
