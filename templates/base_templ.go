// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Base(content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html><head><title>Car Dealership</title><link rel=\"stylesheet\" href=\"assets/styles/styles.css\"></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = header().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n        var carSelect = document.getElementById('car');\n        if (carSelect) {\n            carSelect.addEventListener('change', function() {\n                var selected = this.options[this.selectedIndex];\n                var imgURL = selected.getAttribute('data-image');\n                var quantity = selected.getAttribute('data-quantity');\n\n                console.log(\"Selected Quantity:\", quantity);\n\n                var product = document.getElementById('carimg');\n                var imgContainer = document.getElementById('carpic');\n                var quantityMessage = document.getElementById('quantity-msg');\n\n                console.log(\"Quantity Message Element:\", quantityMessage);\n\n                // Show the image\n                if (imgURL) {\n                    product.src = 'assets/images/' + imgURL;\n                    product.alt = selected.text;\n                    imgContainer.style.display = 'block';\n                } else {\n                    product.src = '';\n                    imgContainer.style.display = 'none';\n                }\n\n                // Update the quantity message\n                if (quantity) {\n                    var quantityInt = parseInt(quantity);\n                    console.log(\"Parsed Quantity:\", quantityInt); // Debugging: Log parsed quantity\n\n                    if (quantityInt === 0) {\n                        quantityMessage.textContent = \"SOLD OUT\";\n                        quantityMessage.style.color = \"red\";\n                        console.log(\"Quantity Message Set to: SOLD OUT\");\n                    } else if (quantityInt < 5) {\n                        quantityMessage.textContent = `Only ${quantityInt} left`;\n                        quantityMessage.style.color = \"orange\";\n                        console.log(`Quantity Message Set to: Only ${quantityInt} left`);\n                    } else {\n                        quantityMessage.textContent = \"\";\n                        console.log(\"Quantity Message Cleared\");\n                    }\n                } else {\n                    quantityMessage.textContent = \"\";\n                    console.log(\"Quantity Message Cleared (No quantity found)\");\n                }\n            });\n        }\n    </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func header() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<header><h1>Car Dealership</h1><nav id=\"navbar\"><ul><li><a href=\"/store\">Home</a></li><li>Cars</li><li>About Us</li><li class=\"admin-link\"><a href=\"/admin\">Admin</a></li></ul></nav></header>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
